<!-- Demonstation of obstacle detector -->
<launch>
  <arg name="frame_id" doc="frame name" />
  <arg name="manager" doc="nodelet manager name" />


  <node pkg="tf2_ros" type="static_transform_publisher" name="map_to_scanner_base" args="0 0 0 0 0 0 map robot"/>
  <node pkg="tf2_ros" type="static_transform_publisher" name="scanner_base_to_front_scanner" args="0 0 0 0 0 0 robot $(arg frame_id)"/>

  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node  name="voxel_grid_worker" pkg="nodelet" type="nodelet" args="load pcl/VoxelGrid $(arg manager)" output="screen">
    <remap from="~/input" to="/velodyne_points"/>
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.01
      filter_limit_max: 3.5
      filter_limit_negative: False
      leaf_size: 0.01
    </rosparam>
  </node>

  <!-- TODO make this a nodlet ; convert from pointcloud2 to pointcloud/-->
  <node pkg="point_cloud_converter" name="point_cloud_converter" type="point_cloud_converter_node" >
  		<remap from="points2_in" to="/voxel_grid_worker/output"/>
  		<remap from="points_out" to="/pcl" />
  </node>

  <!-- NOTE not in use, this publishes on /scan topic; push pointcloud_to_laserscan nodelet into the dummny manager above-->
  <node name="pointcloud_to_laserscan_worker" pkg="nodelet" type="nodelet" args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet $(arg manager)">
      <remap from="cloud_in" to="/voxel_grid_worker/output"/>
      <remap from="scan" to="front_scan"/>
      <rosparam>
          target_frame: front_scanner
          transform_tolerance: 0.01
          min_height: 0.01
          max_height: 3.5

          angle_min: -3.14 # -M_PI
          angle_max: 3.14 # M_PI
          angle_increment: 0.0087 # M_PI/360.0
          scan_time: 0.3333
          range_min: 0.45
          range_max: 100.0
          use_inf: true

          # Concurrency level, affects number of pointclouds queued for processing, thread number governed by nodelet manager
          # 0 : Detect number of cores
          # 1 : Single threaded
          # 2->inf : Parallelism level
          concurrency_level: 1
      </rosparam>
   </node>

  <node name="scans_merger_worker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ScansMerger $(arg manager)">
    <param name="active"            value="true"/>
    <param name="publish_scan"      value="false"/>
    <param name="publish_pcl"       value="true"/>

    <param name="ranges_num"        value="1000"/>

    <param name="min_scanner_range" value="0.05"/>
    <param name="max_scanner_range" value="100."/>

    <param name="min_x_range"       value="-10.0"/>
    <param name="max_x_range"       value="10.0"/>
    <param name="min_y_range"       value="-10.0"/>
    <param name="max_y_range"       value="10.0"/>

    <param name="fixed_frame_id"    value="map"/>
    <param name="target_frame_id"   value="base_link"/>
  </node>

  <node name="obstacle_extractor_worker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleExtractor $(arg manager)">
    <param name="active"               value="true"/>
    <param name="publish_scan"      value="false"/>
    <param name="publish_pcl"       value="true"/>

    <param name="use_split_and_merge"    value="true"/>
    <param name="circles_from_visibles"  value="false"/>
    <param name="discard_converted_segments" value="true"/>
    <param name="transform_coordinates"  value="true"/>

    <param name="min_group_points"     value="5"/>

    <param name="max_group_distance"   value="0.1"/>
    <param name="distance_proportion"  value="0.00628"/>
    <param name="max_split_distance"   value="0.2"/>
    <param name="max_merge_separation" value="0.2"/>
    <param name="max_merge_spread"     value="0.2"/>
    <param name="max_circle_radius"    value="0.6"/>
    <param name="radius_enlargement"   value="0.3"/>

    <param name="frame_id"             value="map"/>
  </node>

  <node name="obstacle_tracker_worker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleTracker $(arg manager)">
    <param name="active"                  value="true"/>

    <param name="loop_rate"               value="100.0"/>
    <param name="tracking_duration"       value="2.0"/>
    <param name="min_correspondence_cost" value="0.6"/>
    <param name="std_correspondence_dev"  value="0.15"/>
    <param name="process_variance"        value="0.1"/>
    <param name="process_rate_variance"   value="0.1"/>
    <param name="measurement_variance"    value="1.0"/>

    <param name="frame_id"                value="map"/>

    <remap from="tracked_obstacles" to="obstacles"/>
  </node>

  <node name="obstacle_publisher_worker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstaclePublisher $(arg manager)">
    <param name="active"           value="false"/>
    <param name="reset"            value="false"/>

    <param name="fusion_example"   value="false"/>
    <param name="fission_example"  value="false"/>

    <param name="loop_rate"        value="10.0"/>
    <param name="radius_margin"    value="0.25"/>

    <rosparam param="x_vector">[10.0]</rosparam>
    <rosparam param="y_vector">[0.0]</rosparam>
    <rosparam param="r_vector">[1.0]</rosparam>
    <rosparam param="vx_vector">[0.0]</rosparam>
    <rosparam param="vy_vector">[0.0]</rosparam>

    <param name="frame_id"         value="map"/>
  </node>

  <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find obstacle_detector)/resources/obstacle_detector.rviz"/>

</launch>
<!-- -->
